{"version":3,"file":"static/js/473.926c8fd5.chunk.js","mappings":"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","sources":["pages/superAdmin/subAdmin/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./style.css\";\nimport { ReactComponent as PlusIcon } from \"../../../assets/images/pages/subAdmin/plus-icon.svg\";\nimport { SUPER_ADMIN_CLIENT_MANAGEMENT_PROFILE_PAGE } from \"../../../config/constants/routePathConstants\";\nimport Table from \"../../../components/common/table\";\n\nimport { ReactComponent as Uparrow } from \"../../../assets/images/common/up-arrow.svg\";\nimport { ReactComponent as Downarrow } from \"../../../assets/images/common/down-arrow.svg\";\nimport { ReactComponent as ActionDots } from \"../../../assets/images/common/action-dots.svg\";\nimport { FormSwitch } from \"../../../components/common/input\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getSubAdminProfileListsApi,\n  subAdminStatusApi,\n} from \"../../../api/authApi\";\nimport { authSelector } from \"../../../redux/slicers/authSlice\";\nimport { USER_TYPE } from \"../../../config/constants/projectConstant\";\nimport { PulseLoader, SyncLoader } from \"react-spinners\";\nimport { InputAdornment, TextField } from \"@mui/material\";\nimport { ReactComponent as SearchIcon } from \"./../../../assets/icons/search-icon.svg\";\nimport { getUserType } from \"../../../utils/projectHelper\";\nimport TablePagination from \"@mui/material/TablePagination\";\n\nconst SubAdmin = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [sortOrders, setSortOrders] = useState({});\n  const [sortedData, setSortedData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [statusLoading, setStatusLoading] = useState(false);\n  const [id, setId] = useState(\"\");\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const { subAdminLists = {}, paginate } = useSelector(authSelector);\n  const { totalPages = 1, totalCount = 1 } = paginate;\n  const [totalPagesUser, setTotalPagesUser] = useState(0);\n\n  useEffect(() => {\n    dispatch(getSubAdminProfileListsApi(setLoading, page + 1, rowsPerPage));\n  }, [page, rowsPerPage]);\n\n  useEffect(() => {\n    setSortedData(subAdminLists);\n    setTotalPagesUser(totalPages);\n  }, [subAdminLists, totalPages]);\n\n  useEffect(() => {\n    const sortData = () => {\n      const sortColumn = Object.keys(sortOrders).find(\n        (columnName) => sortOrders[columnName] !== null\n      );\n      if (sortColumn) {\n        const sortOrder = sortOrders[sortColumn];\n        const sortedData = [...subAdminLists].sort((a, b) => {\n          const valueA = a[sortColumn];\n          const valueB = b[sortColumn];\n          if (typeof valueA === \"string\" && typeof valueB === \"string\") {\n            return sortOrder === \"asc\"\n              ? valueA.localeCompare(valueB)\n              : valueB.localeCompare(valueA);\n          } else {\n            return sortOrder === \"asc\" ? valueA - valueB : valueB - valueA;\n          }\n        });\n        setSortedData(sortedData);\n      }\n    };\n\n    sortData();\n  }, [subAdminLists, sortOrders]);\n\n  const getformattedData = (data) => {\n    const formattedData = columns.reduce((acc, column) => {\n      acc[column.name] = data[column.name];\n      return acc;\n    }, {});\n    return formattedData;\n  };\n  // const datas = subAdminLists?.map((item) => getformattedData(item));\n\n  const handleStatusChange = (e, id) => {\n    const { checked } = e.target;\n    const value = checked ? \"active\" : \"inactive\";\n    setId(id);\n    const formData = {\n      status: value,\n    };\n    setStatusLoading(true);\n    dispatch(subAdminStatusApi(id, formData, setStatusLoading));\n  };\n\n  const newData = subAdminLists.map((item, index) => {\n    const newItem = [];\n    newItem[\"id\"] = {\n      value: index + 1,\n    };\n    newItem[\"userId\"] = {\n      value: 50000 + index,\n    };\n    newItem[\"organisationName\"] = {\n      value: item?.organisationName,\n    };\n    newItem[\"email\"] = {\n      value: item?.email,\n    };\n    newItem[\"mobile\"] = {\n      value: item?.mobile,\n    };\n    newItem[\"address\"] = {\n      value: item?.address,\n    };\n    newItem[\"state\"] = {\n      value: item?.state,\n    };\n    newItem[\"city\"] = {\n      value: item?.city,\n    };\n    newItem[\"pincode\"] = {\n      value: item?.pincode,\n    };\n    newItem[\"userType\"] = {\n      value: getUserType(item?.userType),\n    };\n    newItem[\"status\"] = {\n      value:\n        statusLoading && id == item._id ? (\n          <PulseLoader size=\"10px\" color=\"#0bbbfe\" />\n        ) : (\n          <FormSwitch\n            value={item.status == \"active\" ? true : false}\n            onChange={(e) => handleStatusChange(e, item?._id)}\n          />\n        ),\n    };\n    newItem[\"actions\"] = {\n      value: (\n        <div className=\"action-btn\">\n          <ActionDots />\n        </div>\n      ),\n      style: { textAlign: \"center\" },\n    };\n    return newItem;\n  });\n\n  const handleChangePage = (e, nxtPage) => {\n    setPage(nxtPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <div className=\"main-content\">\n      <div className=\"title\">\n        <h1>Client Management List</h1>\n        <button\n          onClick={() => navigate(SUPER_ADMIN_CLIENT_MANAGEMENT_PROFILE_PAGE)}>\n          <PlusIcon />\n          <span>New Role</span>\n        </button>\n      </div>\n\n      <div className=\"subadmin-table\">\n        <div className=\"subadmin-header\" >\n          <div className=\"search-input\">\n            <TextField\n              size=\"small\"\n              variant=\"outlined\"\n              placeholder=\"Search by Id, Name etc\"\n              style={{ background: \"#F8F8F8\" }}\n              // onChange={handleChange}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <div className=\"subadmin-btn\">\n            <button className=\"filter-btn\">Filters</button>\n            <button className=\"export-btn\">Export</button>\n          </div>\n        </div>\n        <div className=\"table-wrapper\"> \n          <table>\n            <TableHeader\n              columns={columns}\n              sortOrders={sortOrders}\n              setSortOrders={setSortOrders}\n            />\n            {loading ? (\n              <tbody>\n                <tr className=\"table-loading-wrapper\">\n                  <div className=\"sync-loader-wrapper\">\n                    <SyncLoader color=\"#2ea8db\" />\n                  </div>\n                </tr>\n              </tbody>\n            ) : (\n              <tbody>\n                {sortedData.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item?.clientId}</td>\n                    <td>{item.organisationName}</td>\n                    <td>{item.email}</td>\n                    <td>{item.mobile}</td>\n                    <td>{item.address}</td>\n                    <td>{item.state}</td>\n                    <td>{item.city}</td>\n                    <td>{item.pincode}</td>\n                    <td>{getUserType(item?.userType)}</td>\n                    <td>\n                      {statusLoading && id == item._id ? (\n                        <PulseLoader size=\"10px\" color=\"#0bbbfe\" />\n                      ) : (\n                        <FormSwitch\n                          value={item.status == \"active\" ? true : false}\n                          onChange={(e) => handleStatusChange(e, item?._id)}\n                        />\n                      )}\n                    </td>\n                    <td style={{ textAlign: \"center\" }}>\n                      <div className=\"action-btn\">\n                        <ActionDots />\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            )}\n          </table>\n        </div>\n      </div>\n\n      <div>\n        <TablePagination\n          component=\"div\"\n          count={totalPagesUser}\n          page={page}\n          onPageChange={handleChangePage}\n          rowsPerPage={rowsPerPage}\n          backIconButtonProps={{ disabled: page === 0 }}\n          nextIconButtonProps={{\n            disabled: (page + 1) * rowsPerPage >= totalCount,\n          }}\n          rowsPerPageOptions={[2, 3, 10, 15, 20]}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n          labelDisplayedRows={({ from, to, count }) => {\n            const totalPages = Math.ceil(count / rowsPerPage);\n            return `${page + 1} of ${count} pages`;\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SubAdmin;\n\nfunction TableHeader({ columns, sortOrders, setSortOrders }) {\n  const handleSortClick = (columnName) => {\n    const sortOrder = sortOrders[columnName] === \"asc\" ? \"desc\" : \"asc\";\n    setSortOrders({ [columnName]: sortOrder });\n  };\n\n  return (\n    <thead>\n      <tr>\n        {columns.map((column) => {\n          return (\n            <th key={column.name}>\n              <div className=\"subadmin-title\">\n                <p>{column.label}</p>\n                <div\n                  className=\"title-arrow\"\n                  onClick={() => handleSortClick(column.name)}\n                >\n                  {sortOrders[column.name] === \"asc\" && (\n                    <button className=\"up-arrow\">\n                      <Uparrow />\n                    </button>\n                  )}\n                  {sortOrders[column.name] !== \"asc\" && (\n                    <button className=\"up-arrow grayed-out\">\n                      <Uparrow />\n                    </button>\n                  )}\n                  {sortOrders[column.name] === \"desc\" && (\n                    <button className=\"down-arrow\">\n                      <Downarrow />\n                    </button>\n                  )}\n                  {sortOrders[column.name] !== \"desc\" && (\n                    <button className=\"down-arrow grayed-out\">\n                      <Downarrow />\n                    </button>\n                  )}\n                </div>\n              </div>\n            </th>\n          );\n        })}\n      </tr>\n    </thead>\n  );\n}\n\nconst columns = [\n  { name: \"id\", label: \"S.NO\" },\n  { name: \"userId\", label: \"USER ID\" },\n  { name: \"organisationName\", label: \"ORGANIZATION NAME\" },\n  { name: \"email\", label: \"EMAIL ADDRESSS\" },\n  { name: \"mobile\", label: \"CONTACT NO.\" },\n  { name: \"address\", label: \"ADDRESS\" },\n  { name: \"state\", label: \"STATE\" },\n  { name: \"city\", label: \"CITY\" },\n  { name: \"pincode\", label: \"PINCODE\" },\n  { name: \"userType\", label: \"USER TYPE\" },\n  { name: \"status\", label: \"STATUS\" },\n  { name: \"actions\", label: \"ACTIONS\" },\n];\n"],"names":["navigate","useNavigate","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","sortOrders","setSortOrders","_useState3","_useState4","sortedData","setSortedData","_useState5","_useState6","loading","setLoading","_useState7","_useState8","statusLoading","setStatusLoading","_useState9","_useState10","id","setId","_React$useState","React","_React$useState2","page","setPage","_React$useState3","_React$useState4","rowsPerPage","setRowsPerPage","_useSelector","useSelector","authSelector","_useSelector$subAdmin","subAdminLists","paginate","_paginate$totalPages","totalPages","_paginate$totalCount","totalCount","_useState11","_useState12","totalPagesUser","setTotalPagesUser","useEffect","getSubAdminProfileListsApi","sortColumn","Object","keys","find","columnName","sortOrder","_toConsumableArray","sort","a","b","valueA","valueB","localeCompare","sortData","handleStatusChange","e","value","target","checked","formData","status","subAdminStatusApi","map","item","index","newItem","organisationName","email","mobile","address","state","city","pincode","getUserType","userType","_id","_jsx","PulseLoader","size","color","FormSwitch","onChange","className","children","ActionDots","style","textAlign","_jsxs","onClick","SUPER_ADMIN_CLIENT_MANAGEMENT_PROFILE_PAGE","PlusIcon","TextField","variant","placeholder","background","InputProps","startAdornment","InputAdornment","position","SearchIcon","TableHeader","columns","SyncLoader","clientId","TablePagination","component","count","onPageChange","nxtPage","backIconButtonProps","disabled","nextIconButtonProps","rowsPerPageOptions","onRowsPerPageChange","event","parseInt","labelDisplayedRows","_ref","from","to","Math","ceil","concat","_ref2","column","label","_defineProperty","handleSortClick","name","Uparrow","Downarrow"],"sourceRoot":""}